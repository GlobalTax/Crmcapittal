import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.50.0";
import { Resend } from "npm:resend@2.0.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface NotificationRequest {
  type: 'new_commission' | 'due_reminder' | 'overdue_alert';
  commissionId?: string;
  daysAhead?: number;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const resend = new Resend(Deno.env.get('RESEND_API_KEY') ?? '');

    const { type, commissionId, daysAhead = 3 }: NotificationRequest = await req.json();

    // Get notification settings
    const { data: notificationSettings } = await supabase
      .from('commission_settings')
      .select('setting_value')
      .eq('setting_key', 'notification_settings')
      .single();

    const settings = notificationSettings?.setting_value || {
      enabled: true,
      recipients: ['admin@empresa.com'],
      newCommissionNotifications: true,
      dueReminderNotifications: true,
      overdueAlertNotifications: true
    };

    if (!settings.enabled) {
      return new Response(
        JSON.stringify({ success: true, message: 'Notifications disabled' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    let emailsSent = 0;

    switch (type) {
      case 'new_commission':
        if (settings.newCommissionNotifications && commissionId) {
          emailsSent = await sendNewCommissionNotification(supabase, resend, commissionId, settings.recipients);
        }
        break;

      case 'due_reminder':
        if (settings.dueReminderNotifications) {
          emailsSent = await sendDueReminders(supabase, resend, daysAhead, settings.recipients);
        }
        break;

      case 'overdue_alert':
        if (settings.overdueAlertNotifications) {
          emailsSent = await sendOverdueAlerts(supabase, resend, settings.recipients);
        }
        break;

      default:
        throw new Error('Invalid notification type');
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: `${emailsSent} notifications sent successfully`,
        type 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    );

  } catch (error) {
    console.error('Error in commission-notifications function:', error);
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    );
  }
});

async function sendNewCommissionNotification(
  supabase: any, 
  resend: any, 
  commissionId: string, 
  recipients: string[]
): Promise<number> {
  // Fetch commission details
  const { data: commission, error } = await supabase
    .from('commissions')
    .select(`
      *,
      collaborators:collaborator_id (name, email),
      deals:deal_id (deal_name, company_name)
    `)
    .eq('id', commissionId)
    .single();

  if (error || !commission) {
    throw new Error('Commission not found');
  }

  const isAutoGenerated = commission.calculation_details?.calculation_method === 'automatic';

  const emailHtml = `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
          .badge { display: inline-block; background: #e3f2fd; color: #1976d2; padding: 4px 8px; border-radius: 4px; font-size: 12px; }
          .amount { font-size: 24px; font-weight: bold; color: #16a34a; }
          .details { background: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px; margin: 15px 0; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üí∞ Nueva Comisi√≥n ${isAutoGenerated ? 'Generada Autom√°ticamente' : 'Creada'}</h1>
            ${isAutoGenerated ? '<span class="badge">‚ö° AUTOM√ÅTICA</span>' : ''}
          </div>
          
          <div class="details">
            <h3>Detalles de la Comisi√≥n</h3>
            <p><strong>Beneficiario:</strong> ${commission.recipient_name}</p>
            <p><strong>Importe:</strong> <span class="amount">‚Ç¨${commission.commission_amount.toLocaleString('es-ES', { minimumFractionDigits: 2 })}</span></p>
            <p><strong>Porcentaje:</strong> ${commission.commission_percentage || 'N/A'}%</p>
            <p><strong>Fuente:</strong> ${commission.source_name}</p>
            <p><strong>Fecha de vencimiento:</strong> ${commission.payment_due_date ? new Date(commission.payment_due_date).toLocaleDateString('es-ES') : 'No especificada'}</p>
            <p><strong>Estado:</strong> ${commission.status === 'pending' ? 'Pendiente' : commission.status === 'approved' ? 'Aprobada' : 'Pagada'}</p>
          </div>

          ${isAutoGenerated ? `
          <div style="background: #fef3c7; border: 1px solid #f59e0b; border-radius: 8px; padding: 15px; margin: 15px 0;">
            <p><strong>‚ÑπÔ∏è Comisi√≥n Autom√°tica:</strong> Esta comisi√≥n fue generada autom√°ticamente al cerrar un deal como "Won".</p>
          </div>
          ` : ''}

          <p style="color: #64748b; font-size: 14px; margin-top: 30px;">
            Este es un mensaje autom√°tico del Sistema de Comisiones.
          </p>
        </div>
      </body>
    </html>
  `;

  const { error: emailError } = await resend.emails.send({
    from: 'Sistema de Comisiones <no-reply@empresa.com>',
    to: recipients,
    subject: `Nueva comisi√≥n ${isAutoGenerated ? '‚ö° autom√°tica' : ''} - ‚Ç¨${commission.commission_amount.toLocaleString('es-ES')}`,
    html: emailHtml,
  });

  if (emailError) {
    throw new Error('Error sending new commission notification: ' + emailError.message);
  }

  return recipients.length;
}

async function sendDueReminders(
  supabase: any, 
  resend: any, 
  daysAhead: number, 
  recipients: string[]
): Promise<number> {
  const reminderDate = new Date();
  reminderDate.setDate(reminderDate.getDate() + daysAhead);

  const { data: dueCommissions, error } = await supabase
    .from('commissions')
    .select(`
      *,
      collaborators:collaborator_id (name, email)
    `)
    .eq('status', 'pending')
    .lte('payment_due_date', reminderDate.toISOString())
    .gt('payment_due_date', new Date().toISOString());

  if (error) {
    throw new Error('Error fetching due commissions: ' + error.message);
  }

  if (!dueCommissions || dueCommissions.length === 0) {
    return 0;
  }

  const totalAmount = dueCommissions.reduce((sum, c) => sum + c.commission_amount, 0);

  const emailHtml = `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #fef3c7; border: 1px solid #f59e0b; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
          table { width: 100%; border-collapse: collapse; margin: 15px 0; }
          th, td { padding: 10px; text-align: left; border-bottom: 1px solid #e2e8f0; }
          th { background: #f8f9fa; }
          .amount { font-weight: bold; color: #dc2626; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>‚è∞ Recordatorio: Comisiones Pr√≥ximas a Vencer</h1>
            <p>Hay ${dueCommissions.length} comisiones que vencen en los pr√≥ximos ${daysAhead} d√≠as.</p>
          </div>
          
          <p><strong>Total a pagar:</strong> <span style="font-size: 18px; color: #dc2626;">‚Ç¨${totalAmount.toLocaleString('es-ES', { minimumFractionDigits: 2 })}</span></p>

          <table>
            <thead>
              <tr>
                <th>Beneficiario</th>
                <th>Importe</th>
                <th>Vencimiento</th>
              </tr>
            </thead>
            <tbody>
              ${dueCommissions.map(commission => `
                <tr>
                  <td>${commission.recipient_name}</td>
                  <td class="amount">‚Ç¨${commission.commission_amount.toLocaleString('es-ES', { minimumFractionDigits: 2 })}</td>
                  <td>${new Date(commission.payment_due_date).toLocaleDateString('es-ES')}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>

          <p style="color: #64748b; font-size: 14px; margin-top: 30px;">
            Este es un mensaje autom√°tico del Sistema de Comisiones.
          </p>
        </div>
      </body>
    </html>
  `;

  const { error: emailError } = await resend.emails.send({
    from: 'Sistema de Comisiones <no-reply@empresa.com>',
    to: recipients,
    subject: `‚è∞ Recordatorio: ${dueCommissions.length} comisiones vencen pronto`,
    html: emailHtml,
  });

  if (emailError) {
    throw new Error('Error sending due reminders: ' + emailError.message);
  }

  return recipients.length;
}

async function sendOverdueAlerts(
  supabase: any, 
  resend: any, 
  recipients: string[]
): Promise<number> {
  const { data: overdueCommissions, error } = await supabase
    .from('commissions')
    .select(`
      *,
      collaborators:collaborator_id (name, email)
    `)
    .eq('status', 'pending')
    .lt('payment_due_date', new Date().toISOString());

  if (error) {
    throw new Error('Error fetching overdue commissions: ' + error.message);
  }

  if (!overdueCommissions || overdueCommissions.length === 0) {
    return 0;
  }

  const totalAmount = overdueCommissions.reduce((sum, c) => sum + c.commission_amount, 0);

  const emailHtml = `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #fef2f2; border: 1px solid #dc2626; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
          table { width: 100%; border-collapse: collapse; margin: 15px 0; }
          th, td { padding: 10px; text-align: left; border-bottom: 1px solid #e2e8f0; }
          th { background: #f8f9fa; }
          .amount { font-weight: bold; color: #dc2626; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üö® ALERTA: Comisiones Vencidas</h1>
            <p>Hay ${overdueCommissions.length} comisiones que han vencido y requieren atenci√≥n inmediata.</p>
          </div>
          
          <p><strong>Total vencido:</strong> <span style="font-size: 18px; color: #dc2626;">‚Ç¨${totalAmount.toLocaleString('es-ES', { minimumFractionDigits: 2 })}</span></p>

          <table>
            <thead>
              <tr>
                <th>Beneficiario</th>
                <th>Importe</th>
                <th>D√≠as vencido</th>
              </tr>
            </thead>
            <tbody>
              ${overdueCommissions.map(commission => {
                const daysOverdue = Math.floor((new Date().getTime() - new Date(commission.payment_due_date).getTime()) / (1000 * 60 * 60 * 24));
                return `
                <tr>
                  <td>${commission.recipient_name}</td>
                  <td class="amount">‚Ç¨${commission.commission_amount.toLocaleString('es-ES', { minimumFractionDigits: 2 })}</td>
                  <td style="color: #dc2626; font-weight: bold;">${daysOverdue} d√≠as</td>
                </tr>
                `;
              }).join('')}
            </tbody>
          </table>

          <p style="color: #64748b; font-size: 14px; margin-top: 30px;">
            Este es un mensaje autom√°tico del Sistema de Comisiones.
          </p>
        </div>
      </body>
    </html>
  `;

  const { error: emailError } = await resend.emails.send({
    from: 'Sistema de Comisiones <no-reply@empresa.com>',
    to: recipients,
    subject: `üö® URGENTE: ${overdueCommissions.length} comisiones vencidas`,
    html: emailHtml,
  });

  if (emailError) {
    throw new Error('Error sending overdue alerts: ' + emailError.message);
  }

  return recipients.length;
}